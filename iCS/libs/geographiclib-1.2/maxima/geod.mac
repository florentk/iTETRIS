/*

Compute the series expansions for the spheroidal geodesic problem.

Written by Charles Karney <charles@karney.com>
http://geographiclib.sourceforge.net/

$Id: geod.mac 6826 2010-05-12 14:35:16Z karney $

There are 4 sections in this file

(1) Functions to compute the expansions
(2) Functions to print C++ code
(3) Functions to display the results
(4) Calls to the above.

Edit the section at the end, to modify what is done.  As distributed
this code computes the 8th order series.  This takes less that 10 secs.
To run the code, start Maxima and enter

  load("geod.mac")$

*/

/* EXPANSIONS FOR INTEGRALS */

taylordepth:5$

/*

Express

    I1 = integrate( sqrt(1+k2*sin(sigma1)^2), sigma1, 0, sigma )

as a series

    A1 * ( sigma + sum(C1[l] * sin(2*l*sigma), l, 1, maxpow) )

valid for k2 small.  It is convenient to write k2 = 4 * eps / (1 - eps)^2
and to expand (1 - eps) * I1 retaining terms up to order eps^maxpow
in A1 and C1[l].  This leads to a series where half the terms drop out.

*/

computeI1(maxpow):=block([sintegrand,sintegrandexp,s,sigma,tau1,k2,eps],
  sintegrand:sqrt(1+k2*sin(sigma)^2),
/* Multiplicative factor 1/(1-eps) */
  sintegrandexp:ratdisrep(taylor(
      (1-eps)*subst([k2=4*eps/(1-eps)^2],sintegrand),
      eps,0,maxpow)),
  s:trigreduce(integrate(sintegrandexp,sigma)),
  s:s-subst(sigma=0,s),
  A1:expand(subst(sigma=2*%pi,s)/(2*%pi)),
  tau1:expand(ratdisrep(taylor(s/A1,eps,0,maxpow))),
  for i:1 thru maxpow do C1[i]:coeff(tau1,sin(2*i*sigma)),
  if expand(tau1-sigma-sum(C1[i]*sin(2*i*sigma),i,1,maxpow)) # 0
  then error("left over terms in B1"),
  A1:A1/(1-eps),
  'done)$

/*

Write

    tau1 = sigma + sum(C1[l] * sin(2*l*sigma), l, 1, maxpow)

and revert this to obtain

    sigma = tau1 + sum(C1p[l] * sin(2*tau1), l, 1, maxpow)

retaining terms up to order eps^maxpow in tp[l].

Write

  tau = sigma + B1(sigma)
  sigma = tau + B1p(tau)
  B1(sigma) = sum(C1[l] * sin(2*l*sigma), l, 1, inf)
  B1p(tau) = sum(C1p[l] * sin(2*tau), l, 1, inf)

Then the Lagrange Inversion Theorem

   J. L. Lagrange, Nouvelle méthode pour résoudre les équations
   littérales par le moyen des séries, Mém. de l'Acad. Roy. des Sciences
   de Berlin 24, 251-326 (1768, publ. 1770), Sec. 16,
   http://books.google.com/books?id=YywPAAAAIAAJ&pg=PA25

gives

  B1p(tau) = sum( (-1)^n/n! * diff( B1(tau)^n, tau, n-1 ),
                         n, 1, inf)

Call this after computeI1(maxpow)$

*/

revertI1(maxpow):=block([tau,eps,tauacc:1,sigacc:0],
  for n:1 thru maxpow do (
    tauacc:trigreduce(ratdisrep(taylor(
          -sum(C1[j]*sin(2*j*tau),j,1,maxpow-n+1)*tauacc/n,
          eps,0,maxpow))),
    sigacc:sigacc+expand(diff(tauacc,tau,n-1))),
  for i:1 thru maxpow do C1p[i]:coeff(sigacc,sin(2*i*tau)),
  if expand(sigacc-sum(C1p[i]*sin(2*i*tau),i,1,maxpow)) # 0
  then error("left over terms in B1p"),
  'done)$

/*

Express

    I2 = integrate( 1/sqrt(1+k2*sin(sigma1)^2), sigma1, 0, sigma )

as a series

    A2 * ( sigma + sum(C2[l] * sin(2*l*sigma), l, 1, maxpow) )

valid for k2 small.  It is convenient to write k2 = 4 * eps / (1 - eps)^2
and to expand 1/(1 - eps) * I2 retaining terms up to order eps^maxpow
in A2 and C2[l].  This leads to a series where half the terms drop out.

*/

computeI2(maxpow):=block([sintegrand,sintegrandexp,s,sigma,tau1,k2,eps],
  sintegrand:1/sqrt(1+k2*sin(sigma)^2),
/* Multiplicative factor (1-eps) */
  sintegrandexp:ratdisrep(taylor(
      1/(1-eps)*subst([k2=4*eps/(1-eps)^2],sintegrand),
      eps,0,maxpow)),
  s:trigreduce(integrate(sintegrandexp,sigma)),
  s:s-subst(sigma=0,s),
  A2:expand(subst(sigma=2*%pi,s)/(2*%pi)),
  tau1:expand(ratdisrep(taylor(s/A2,eps,0,maxpow))),
  for i:1 thru maxpow do C2[i]:coeff(tau1,sin(2*i*sigma)),
  if expand(tau1-sigma-sum(C2[i]*sin(2*i*sigma),i,1,maxpow)) # 0
  then error("left over terms in B2"),
  A2:A2*(1-eps),
  'done)$

/*

Express

    I3 = integrate( (2-f)/(1+(1-f)*sqrt(1+k2*sin(sigma1)^2)), sigma1, 0, sigma )

as a series

    A3 * ( sigma + sum(C3[l] * sin(2*l*sigma), l, 1, maxpow-1) )

valid for f and k2 small.  It is convenient to write k2 = 4 * eps / (1 -
eps)^2 and f = eps + del - del * eps [i.e., del = (f - eps)/(1 -
eps)] and to divide out a factor (2 - f)/(2 - del) before the
expansion.  This procedure leads to a series where half the terms drop
out.

*/

computeI3(maxpow):=block([int,intexp,dlam,eta,del,eps,nu,z,f],
  maxpow:maxpow-1,
  /* Multiplicative factor (2-f)/(2-del) */
  int : subst([del=del*z,eps=eps*z],
    (2-del)/(1+(1-del)*sqrt(1+eps^2-2*eps*cos(2*sigma)))),
  intexp:ratdisrep(taylor(int,z,0,maxpow)),
  dlam:trigreduce(integrate(intexp,sigma)),
  dlam:dlam-subst(sigma=0,dlam),
  A3:expand(subst(sigma=2*%pi,dlam)/(2*%pi)),
  eta:expand(subst([z=1],ratdisrep(taylor(dlam/A3,z,0,maxpow)))),
  A3:expand(subst([z=1],ratdisrep(taylor(A3,z,0,maxpow)))),
  for i:1 thru maxpow do C3[i]:coeff(eta,sin(2*i*sigma)),
  if expand(eta-sigma-sum(C3[i]*sin(2*i*sigma),i,1,maxpow)) # 0
  then error("left over terms in B3"),
  A3:(2-f)/(2-del)*A3,
  'done)$

/* Call all of the above */
computeall():=(
  computeI1(maxpow), revertI1(maxpow),
  computeI2(maxpow), computeI3(maxpow))$

/* FORMAT FOR C++ */

/* If nA1, nC1, nC1p, nA2, nA3, nC3 are compile-time constants
indicating the required order, the compiler will include only the needed
code.  STATIC_ASSERT is a macro to cause a compile-time error if the
assertion is false.  */

codeA1(maxpow):=block([tab2:"    ",tab3:"      "],
  print("  // The scale factor A1-1 = mean value of I1-1
  Math::real Geodesic::A1m1f(real eps) throw() {
    real
      eps2 = sq(eps),
      t;
    switch (nA1/2) {"),
  for n:0 thru entier(maxpow/2) do block([
    q:horner(ratdisrep(taylor(subst([eps=sqrt(eps2)],A1*(1-eps)-1),eps2,0,n))),
    linel:600],
    print(concat(tab2,"case ",string(n),":")),
    print(concat(tab3,"t = ",string(q),";")),
    print(concat(tab3,"break;"))),
  print(concat(tab2,"default:")),
  print(concat(tab3,"STATIC_ASSERT(nA1 >= ",string(0),
      " && nA1 <= ",string(maxpow),", \"Bad value of nA1\");")),
  print(concat(tab3,"t = 0;")),
  print("    }
    return (t + eps) / (1 - eps);
  }"),
'done)$

codeC1(maxpow):=block([tab2:"    ",tab3:"      "],
  print("  // The coefficients C1[l] in the Fourier expansion of B1
  void Geodesic::C1f(real eps, real c[]) throw() {
    real
      eps2 = sq(eps),
      d = eps;
    switch (nC1) {"),
  for n:0 thru maxpow do (
    print(concat(tab2,"case ",string(n),":")),
    for m:1 thru n do block([q:d*horner(
        subst([eps=sqrt(eps2)],ratdisrep(taylor(C1[m],eps,0,n))/eps^m)),
      linel:600],
      if m>1 then print(concat(tab3,"d *= eps;")),
      print(concat(tab3,"c[",string(m),"] = ",string(q),";"))),
    print(concat(tab3,"break;"))),
  print(concat(tab2,"default:")),
  print(concat(tab3,"STATIC_ASSERT(nC1 >= ",string(0),
      " && nC1 <= ",string(maxpow),", \"Bad value of nC1\");")),
  print("    }
  }"),
'done)$

codeC1p(maxpow):=block([tab2:"    ",tab3:"      "],
  print("  // The coefficients C1p[l] in the Fourier expansion of B1p
  void Geodesic::C1pf(real eps, real c[]) throw() {
    real
      eps2 = sq(eps),
      d = eps;
    switch (nC1p) {"),
  for n:0 thru maxpow do (
    print(concat(tab2,"case ",string(n),":")),
    for m:1 thru n do block([q:d*horner(
        subst([eps=sqrt(eps2)],ratdisrep(taylor(C1p[m],eps,0,n))/eps^m)),
      linel:600],
      if m>1 then print(concat(tab3,"d *= eps;")),
      print(concat(tab3,"c[",string(m),"] = ",string(q),";"))),
    print(concat(tab3,"break;"))),
  print(concat(tab2,"default:")),
  print(concat(tab3,"STATIC_ASSERT(nC1p >= ",string(0),
      " && nC1p <= ",string(maxpow),", \"Bad value of nC1p\");")),
  print("    }
  }"),
'done)$

codeA2(maxpow):=block([tab2:"    ",tab3:"      "],
  print("  // The scale factor A2-1 = mean value of I2-1
  Math::real Geodesic::A2m1f(real eps) throw() {
    real
      eps2 = sq(eps),
      t;
    switch (nA2/2) {"),
  for n:0 thru entier(maxpow/2) do block([
    q:horner(ratdisrep(taylor(subst([eps=sqrt(eps2)],A2/(1-eps)-1),eps2,0,n))),
    linel:600],
    print(concat(tab2,"case ",string(n),":")),
    print(concat(tab3,"t = ",string(q),";")),
    print(concat(tab3,"break;"))),
  print(concat(tab2,"default:")),
  print(concat(tab3,"STATIC_ASSERT(nA2 >= ",string(0),
      " && nA2 <= ",string(maxpow),", \"Bad value of nA2\");")),
  print(concat(tab3,"t = 0;")),
  print("    }
    return t * (1 - eps) - eps;
  }"),
'done)$

codeC2(maxpow):=block([tab2:"    ",tab3:"      "],
  print("  // The coefficients C2[l] in the Fourier expansion of B2
  void Geodesic::C2f(real eps, real c[]) throw() {
    real
      eps2 = sq(eps),
      d = eps;
    switch (nC2) {"),
  for n:0 thru maxpow do (
    print(concat(tab2,"case ",string(n),":")),
    for m:1 thru n do block([q:d*horner(
        subst([eps=sqrt(eps2)],ratdisrep(taylor(C2[m],eps,0,n))/eps^m)),
      linel:600],
      if m>1 then print(concat(tab3,"d *= eps;")),
      print(concat(tab3,"c[",string(m),"] = ",string(q),";"))),
    print(concat(tab3,"break;"))),
  print(concat(tab2,"default:")),
  print(concat(tab3,"STATIC_ASSERT(nC2 >= ",string(0),
      " && nC2 <= ",string(maxpow),", \"Bad value of nC2\");")),
  print("    }
  }"),
'done)$

codeA3(maxpow):=block([tab2:"    ",tab3:"      "],
  print("  // The scale factor A3 = mean value of I3
  Math::real Geodesic::A3f(real f, real eps) throw() {
    real
      del = (f - eps) / (1 - eps),
      // Correct limit for del -> 0 is nu2 = mu/2 / (1 - mu/2).  However,
      // it doesn't matter because the correction vanishes in this limit.
      nu2 = sq( del != 0 ? eps / del : 1 );
    real g;
    switch (nA3) {"),
  for n:0 thru maxpow do block(
    [q:if n=0 then 0 else
    subst([del^3=del*sq(del),nu2^2=sq(nu2)],
      horner(ratdisrep(taylor(
          subst([eps=sqrt(nu2)*del], A3)/((2 - f)/(2 - del)),del,0,n-1)),del)),
    linel:600],
    print(concat(tab2,"case ",string(n),":")),
    print(concat(tab3,"g = ",string(q),";")),
    print(concat(tab3,"break;"))),
  print(concat(tab2,"default:")),
  print(concat(tab3,"STATIC_ASSERT(nA3 >= ",string(0),
      " && nA3 <= ",string(maxpow),", \"Bad value of nA3\");")),
  print(concat(tab3,"g = 0;")),
  print("    }
    return (2 - f)/(2 - del) * g;
  }"),
'done)$

codeC3(maxpow):=block([tab2:"    ",tab3:"      "],
  print("  // The coefficients C3[l] in the Fourier expansion of B3
  void Geodesic::C3f(real f, real eps, real c[]) throw() {
    real
      del = (f - eps) / (1 - eps),
      // Correct limit for del -> 0 is nu2 = mu/2 / (1 - mu/2).  However,
      // it doesn't matter because the correction vanishes in this limit.
      nu2 = sq( del != 0 ? eps / del : 1 );
    real d = eps;
    switch (nC3) {"),
  for n:0 thru maxpow do (
    print(concat(tab2,"case ",string(n),":")),
    for m:1 thru n-1 do block(
      [q:d*horner(subst([nu=sqrt(nu2)],
          ratdisrep(taylor(
              subst([eps=sqrt(nu2)*del],expand(C3[m]/eps^m)),
              del,0,n-m-1))),del),
      linel:600],
      if m>1 then print(concat(tab3,"d *= eps;")),
      print(concat(tab3,"c[",string(m),"] = ",string(q),";"))),
    print(concat(tab3,"break;"))),
  print(concat(tab2,"default:")),
  print(concat(tab3,"STATIC_ASSERT(nC3 >= ",string(0),
      " && nC3 <= ",string(maxpow),", \"Bad value of nC3\");")),
  print("    }
  }"),
'done)$

printcode():=(
  print(""),
  print(concat("  // Generated by Maxima on ",timedate())),
  print(""),
  codeA1(maxpow),
  print(""),
  codeC1(maxpow),
  print(""),
  codeC1p(maxpow),
  print(""),
  codeA2(maxpow),
  print(""),
  codeC2(maxpow),
  print(""),
  codeA3(maxpow),
  print(""),
  codeC3(maxpow))$

/* FORMAT FOR DISPLAY */

dispA1(ord):=block(
  [tt:expand(ratdisrep(taylor(A1*(1-eps),eps,0,ord))),ttt,linel:600],
  for j:2 step 2 thru ord do (ttt:coeff(tt,eps,j),
    print(concat(if j = 2 then "A1 = (1 " else "        ",
        if ttt>0 then "+ " else "- ",
        string(abs(ttt)), " * ", string(eps^j),
        if j=ord or j = ord-1 then ") / (1 - eps);" else ""))))$

dispC1(ord):=for i:1 thru ord do
block([tt:expand(ratdisrep(taylor(C1[i],eps,0,ord))),ttt,linel:600],
  print(),
  for j:i step 2 thru ord do (ttt:coeff(tt,eps,j), print(concat(
        if j = i then concat("C1[",string(i),"] = ") else "        ",
        if ttt>0 then "+ " else "- ",
        string(abs(ttt)), " * ", string(eps^j),
        if j=ord or j=ord-1 then ";" else ""))))$

dispC1p(ord):=for i:1 thru ord do
block([tt:expand(ratdisrep(taylor(C1p[i],eps,0,ord))),ttt,linel:600],
  print(),
  for j:i step 2 thru ord do (ttt:coeff(tt,eps,j), print(concat(
        if j = i then concat("C1p[",string(i),"] = ") else "         ",
        if ttt>0 then "+ " else "- ",
        string(abs(ttt)), " * ", string(eps^j),
        if j=ord or j=ord-1 then ";" else ""))))$

dispA2(ord):=block(
  [tt:expand(ratdisrep(taylor(A2/(1-eps),eps,0,ord))),ttt,linel:600],
  for j:2 step 2 thru ord do (ttt:coeff(tt,eps,j),
    print(concat(if j = 2 then "A2 = (1 " else "        ",
        if ttt>0 then "+ " else "- ",
        string(abs(ttt)), " * ", string(eps^j),
        if j=ord or j = ord-1 then ") * (1 - eps);" else ""))))$

dispC2(ord):=for i:1 thru ord do
block([tt:expand(ratdisrep(taylor(C2[i],eps,0,ord))),ttt,linel:600],
  print(),
  for j:i step 2 thru ord do (ttt:coeff(tt,eps,j), print(concat(
        if j = i then concat("C2[",string(i),"] = ") else "        ",
        if ttt>0 then "+ " else "- ",
        string(abs(ttt)), " * ", string(eps^j),
        if j=ord or j=ord-1 then ";" else ""))))$

dispA3(ord):=(ord:ord-1,block(
  [tt:ratdisrep(taylor(subst([eps=z*eps,del=z*del],
        A3/((2-f)/(2-del))),z,0,ord)),ttt,t4,linel:600,s],
  print("A3 = (2 - f) / (2 - del) * (1"),
  tt:expand(subst([eps=nu*del,z=1],tt)),
  for j:1 thru ord do (ttt:expand(coeff(tt,del,j)),
    if ttt # 0 then block([a:taylor(ttt+nu^(ord+1),nu,0,ord+1),paren,s],
      paren : is(length(a) > 2),
      if subst([nu=1],part(a,1)) > 0 then s:"        + "
      else (s:"        - ", a:-a),
      if paren then s:concat(s,"("),
      for k:1 thru length(a)-1 do block([term:part(a,k),n],
        n:subst([nu=1],term),
        term:term/n,
        if n > 0 and k > 1 then s:concat(s," + ")
        else if n < 0 then (s:concat(s," - "), n:-n),
        if lopow(term,nu) = 0 then s:concat(s,string(n))
        else (
          if n # 1 then s:concat(s,string(n)," * "),
          s:concat(s,string(term))
          )),
      if paren then s:concat(s,")"),
      s:concat(s," * ", string(del^j)),
      print(concat(s,if j = ord then ");" else ""))))))$

dispC3(ord):=(ord:ord-1,for i:1 thru ord do
block([tt:ratdisrep(taylor(subst([eps=z*eps,del=z*del],C3[i]),z,0,ord)),
  ttt,t4,linel:600],
  for j:i thru ord do (
    ttt:subst([eps=nu*del],expand(coeff(tt,z,j)/(eps^i*del^(j-i)))),
    if ttt # 0 then block([a:taylor(ttt+nu^(ord+1),nu,0,ord+1),paren,s],
      paren : is(length(a) > 2),
      s:if j = i then concat("C3[",i,"] = ") else "        ",
      if subst([nu=1],part(a,1)) > 0 then s:concat(s,"+ ")
      else (s:concat(s,"- "), a:-a),
      if paren then s:concat(s,"("),
      for k:1 thru length(a)-1 do block([term:part(a,k),n],
        n:subst([nu=1],term),
        term:term/n,
        if n > 0 and k > 1 then s:concat(s," + ")
        else if n < 0 then (s:concat(s," - "), n:-n),
        if lopow(term,nu) = 0 then s:concat(s,string(n))
        else (
          if n # 1 then s:concat(s,string(n)," * "),
          s:concat(s,string(term))
          )),
      if paren then s:concat(s,")"),
      s:concat(s," * ", string(del^(j-i)*eps^i)),
      print(concat(s,if j = ord then ";" else ""))))))$

dispseries():=(
  print(""),
  print(concat("// Generated by Maxima on ",timedate())),
  print(""),
  dispA1(maxpow),
  print(""),
  dispC1(maxpow),
  print(""),
  dispC1p(maxpow),
  print(""),
  dispA2(maxpow),
  print(""),
  dispC2(maxpow),
  print(""),
  dispA3(maxpow),
  print(""),
  dispC3(maxpow),
  print(""))$

/* CALL THE FUNCTIONS */

/* Timings for computeall(n)
   n   time(s)
   8     4
  10     8
  12    16
  20   128
  30   771 (13m)
  */
maxpow:8$
computeall()$
printcode()$
dispseries()$
